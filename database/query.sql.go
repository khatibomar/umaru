// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package database

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  name, link, image, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, link, image, status
`

type CreateBookParams struct {
	Name   string
	Link   string
	Image  string
	Status int32
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Name,
		arg.Link,
		arg.Image,
		arg.Status,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Link,
		&i.Image,
		&i.Status,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getDoneBooks = `-- name: GetDoneBooks :many
SELECT name, link, image
FROM books
WHERE status = 2
`

type GetDoneBooksRow struct {
	Name  string
	Link  string
	Image string
}

func (q *Queries) GetDoneBooks(ctx context.Context) ([]GetDoneBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getDoneBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDoneBooksRow
	for rows.Next() {
		var i GetDoneBooksRow
		if err := rows.Scan(&i.Name, &i.Link, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReadingBook = `-- name: GetReadingBook :many
SELECT name, link, image
FROM books
WHERE status = 1
`

type GetReadingBookRow struct {
	Name  string
	Link  string
	Image string
}

func (q *Queries) GetReadingBook(ctx context.Context) ([]GetReadingBookRow, error) {
	rows, err := q.db.QueryContext(ctx, getReadingBook)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReadingBookRow
	for rows.Next() {
		var i GetReadingBookRow
		if err := rows.Scan(&i.Name, &i.Link, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWantToReadBooks = `-- name: GetWantToReadBooks :many
SELECT name, link, image FROM books
WHERE status = 3
`

type GetWantToReadBooksRow struct {
	Name  string
	Link  string
	Image string
}

func (q *Queries) GetWantToReadBooks(ctx context.Context) ([]GetWantToReadBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getWantToReadBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWantToReadBooksRow
	for rows.Next() {
		var i GetWantToReadBooksRow
		if err := rows.Scan(&i.Name, &i.Link, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
  set name = $2,
  link = $3,
  image = $4,
  status = $5
WHERE id = $1
`

type UpdateBookParams struct {
	ID     int64
	Name   string
	Link   string
	Image  string
	Status int32
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.ID,
		arg.Name,
		arg.Link,
		arg.Image,
		arg.Status,
	)
	return err
}
